#!/usr/bin/env php
<?php

if (PHP_SAPI !== 'cli') {
    die('This script can only be run from the command line');
}

const FILE_PATH = './db.json';

/**
 * Status of task
 */
enum Status: string {
    case DONE = 'done';
    case PENDING = "pending";
    case IN_PROGRESS = "in_progress";
}

class Task {
    private ?int $id = null;
    private ?Status $status = null;
    private ?string $description = null;
    private ?DateTime $created_at = null;
    private ?DateTime $updated_at = null;

    public function __construct(
        ?int $id = null,
        ?Status $status = Status::PENDING,
        ?string $description = null
    ) {
        $this->id = $id;
        $this->status = $status;
        $this->description = $description;
        $now = new DateTime('now');
        $this->created_at = $now;
        $this->updated_at = $now;
    }

    public function getId(): ?int {
        return $this->id;
    }
    public function setId(?int $id): ?self {
        $this->id = $id;
        return $this;
    }

    public function getStatus(): ?Status {
        return $this->status;
    }
    public function setStatus(?Status $status): ?self {
        $this->status = $status;
        return $this;
    }

    public function getDescription(): ?string {
        return $this->description;
    }
    public function setDescription(?string $description): ?self {
        $this->description = $description;
        return $this;
    }

    public function getCreatedAt(): ?DateTime {
        return $this->created_at;
    }
    public function setCreatedAt(?DateTime $created_at): ?self {
        $this->created_at = $created_at;
        return $this;
    }

    public function getUpdatedAt(): ?DateTime {
        return $this->updated_at;
    }
    public function setUpdatedAt(?DateTime $updated_at): ?self {
        $this->updated_at = $updated_at;
        return $this;
    }

    public function jsonSerialize()
    {
        return get_object_vars($this);
    }
}

function main($argv) {

    // Remove the script name from arguments
    array_shift($argv);
    
    if (empty($argv)) {
        echo "Usage: task-manager <command>\n";
        echo "Available commands:\n";
        echo "  list                                            - List all tasks\n";
        echo "  list    <'done' | 'pending' | 'in_progress'>    - List tasks based in status\n";
        echo "  add     <task-description>                      - Add a new task\n";
        echo "  remove  <task-id>                               - Remove a task\n";
        echo "  update  <task-id>   <new-description>           - Remove a task\n";
        return;
    }

    $command = $argv[0];
    
    switch ($command) {
        case 'list':
            $status = isset($argv[1]) ? Status::tryFrom($argv[1]) : null;
            listTasks($status);
            break;
        case 'add':
            if(!isset($argv[1])) {
                echo "Task description is required\n";
                return;
            } else {
                addTask($argv[1]);
            }
            break;
        case 'update':
            if(!isset($argv[1])) {
                echo "Task ID is required\n";
                return;
            } else if (!isset($argv[2])){
                echo "New description is required\n";
            }
            updateTask($argv[1], $argv[2]);
            break;
        case 'delete':
            if(!isset($argv[1])) {
                echo "Task ID is required\n";
                return;
            }
            deleteTask($argv[1]);
            break;
        default:
            echo "Unknown command: $command\n";
            break;
    }
}

/**
 * Function that returns database, if file does not exists, it creates it
 */
function getDatabase(): array {
    if (!file_exists(FILE_PATH)) {
        return [];
    } else {
        $json = file_get_contents(FILE_PATH);
        return json_decode($json, true) ?? [];
    }
}

/**
 * Function to list tasks
 * 
 * @param ?Status $status   (Optional) Status filter if needed
 */
function listTasks(?Status $status = null){
    $data = getDatabase();
    $message = "List of all tasks: \n";
    if($status){
        $message = "List of tasks with status {$status->value}:\n";
        $data = array_filter($data, function($task) use ($status){
            return $task['status'] === $status->value;
        });
    }
    echo $message;
    foreach($data as $task) {
        echo "{$task['id']} - {$task['description']} ({$task['status']})\n";
    }
}

/**
 * Function to create a new task
 * 
 * @param ?string $description  Task description
 */
function addTask(string $description){
    $data = getDatabase();
    $index = $data[count($data) - 1]['id'] + 1;
    $task = new Task(
        id: $index,
        description: $description
    );
    array_push($data, $task->jsonSerialize());
    file_put_contents(FILE_PATH, json_encode($data));
    echo "Task added succesfully (ID: $index)";
}

/**
 * Function to update a task description
 * 
 * @param string $id    Task ID to update
 * @param string $description   New task description
 */
function updateTask(string $id, string $description){
    $data = getDatabase();
    $index = array_search($id, array_column($data, 'id'));
    if(!$index){
        echo "Task $id not found";
        return;
    }
    $data[$index]['description'] = $description;
    $data[$index]['updated_at'] = new DateTime('now');
    file_put_contents(FILE_PATH, json_encode($data));
    echo "Task $id updated succesfully";
}

/**
 * Function to delete a task
 * 
 * @param string $id    Task ID
 */
function deleteTask(string $id){
    $data = getDatabase();
    $data = array_filter($data, function($task) use ($id){
        return strval($task['id']) !== $id;
    });
    file_put_contents(FILE_PATH, json_encode($data));
    echo "Task deleted succesfully";
}

main($argv);
